name: deploy to lambda
on:
  # Trigger the workflow on push requests on the master branch
  push:
    branches:
      - master
env:
  DEPLOY_DIR: build
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: my_github_lambda_tag
jobs:

  deploy_source:
    name: deploy lambda from source
    runs-on: ubuntu-latest
    steps:
      - name: checkout source code
        uses: actions/checkout@v1
      - name: default deploy
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
          aws_region: $AWS_REGION
#          folder: build
          function_name: lambda_cd
          source: github_lambda.py
#      - name: deploy to s3
#        uses: reggionick/s3-deploy@v3
#        with:
#          folder: build
#          bucket: ${{ secrets.S3_BUCKET }}
#          bucket-region: ${{ secrets.AWS_REGION }}
      - name: Deploy static site to S3 bucket
        run: aws s3 sync ./$DEPLOY_DIR/ s3://${{ secrets.S3_BUCKET }}/$DEPLOY_DIR --delete
        # --delete flag will remove any file in the s3 that are not on the "thefoldertodeploy" folder
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "HOME: $HOME"
          echo "ECR REGISTRY: $ECR_REGISTRY"
          pwd
          aws s3 cp s3://${{ secrets.S3_BUCKET }}/$DEPLOY_DIR .
          ls -l
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Full image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker run $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          ls -l
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG



#      - name: create lambda from ecr image
#        run: aws
