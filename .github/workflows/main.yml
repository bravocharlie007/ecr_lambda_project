name: deploy to lambda
on:
  # Trigger the workflow on push requests on the master branch
  push:
    branches:
      - master
  # Allow manual deployment for emergency fixes
  workflow_dispatch:

# Use OIDC instead of long-lived credentials for better security
permissions:
  id-token: write
  contents: read
  security-events: write

env:
  DEPLOY_DIR: build
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  # Use semantic versioning with commit SHA for better tracking
  IMAGE_TAG: v1.0.0-${{ github.sha }}
jobs:
  security-prerequisites:
    name: Security prerequisites check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for security scanning
      
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: TruffleHog OSS Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified --fail

  security-scan:
    name: Security scanning
    runs-on: ubuntu-latest
    needs: security-prerequisites
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'  # Fail build on critical/high vulnerabilities
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy_source:
    name: deploy lambda from source
    runs-on: ubuntu-latest
    needs: security-scan  # Only deploy if security scan passes
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4  # Updated to latest version
      
      # Configure AWS credentials using OIDC (more secure than access keys)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Gaming-Deploy-${{ github.run_id }}
      
      # Set up Python for testing
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      # Install dependencies and run security tests
      - name: Install dependencies and run tests
        run: |
          pip install -r build/requirements.txt
          # Security: Check for vulnerabilities in dependencies
          pip install bandit safety
          bandit -r . || true  # Don't fail build on bandit warnings
          safety check || true  # Don't fail build on safety warnings
          # Compile check
          python -m py_compile github_lambda.py
          python -m py_compile build/github_lambda.py
      
      # Deploy Lambda function with proper error handling and security
      - name: Deploy Lambda function
        run: |
          # Create deployment package
          zip -r lambda-deployment.zip github_lambda.py
          
          # Verify package integrity
          if [ ! -f lambda-deployment.zip ]; then
            echo "Error: Deployment package not created"
            exit 1
          fi
          
          # Update Lambda function with error handling
          aws lambda update-function-code \
            --function-name lambda_cd \
            --zip-file fileb://lambda-deployment.zip \
            --region ${{ env.AWS_REGION }} \
            --publish || \
          aws lambda create-function \
            --function-name lambda_cd \
            --runtime python3.9 \
            --role ${{ secrets.LAMBDA_EXECUTION_ROLE_ARN }} \
            --handler github_lambda.lambda_handler \
            --zip-file fileb://lambda-deployment.zip \
            --timeout 30 \
            --memory-size 256 \
            --region ${{ env.AWS_REGION }} \
            --publish
          
          # Clean up deployment package
          rm -f lambda-deployment.zip
      
      # Deploy to S3 with encryption
      - name: Deploy to S3 with encryption
        run: |
          aws s3 sync ./$DEPLOY_DIR/ s3://${{ secrets.S3_BUCKET }}/$DEPLOY_DIR \
            --delete \
            --server-side-encryption AES256 \
            --region ${{ env.AWS_REGION }}
      
      # Build and push secure Docker image
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build, scan and push secure image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build Docker image with proper labels for tracking
          docker build \
            --label "git-commit=${{ github.sha }}" \
            --label "build-date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --label "version=${{ env.IMAGE_TAG }}" \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            .
          
          # Scan image for vulnerabilities before pushing
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $HOME/Library/Caches:/root/.cache/ \
            aquasec/trivy:latest image \
            --exit-code 1 \
            --severity CRITICAL,HIGH \
            $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Push image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "Successfully pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
